// Code generated by go-bindata.
// sources:
// assets/tpl/block.c.tpl
// assets/tpl/block.xml.tpl
// assets/tpl/schema.yml.tpl
// assets/c/pb_macro.h
// DO NOT EDIT!

package pb

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplBlockCTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\x83\x30\x10\x85\x77\x7e\xc5\x1b\x32\x24\xa8\xe0\x3d\x52\x3b\xb4\x91\xaa\x2c\x69\x97\x76\xad\x1c\xb8\x06\x2b\xc6\x46\xf8\x48\x14\x59\xfc\xf7\xca\x26\x21\x0c\xad\x0a\x13\xfe\xee\xdd\xbd\x3b\x9f\x45\x9a\x20\xc5\xbb\xe4\xa2\x7a\xd6\xb6\x38\xae\xe1\x3d\xf2\x9d\xac\x09\x7d\x1f\x42\xe1\xf8\xe1\xa8\x35\x03\x42\x16\xc9\x46\x32\xed\xec\x79\xd0\x04\xd9\x2b\x19\x6a\x25\x53\x89\xfd\x05\xcd\xfe\x40\x06\x15\x73\xe3\xd6\x42\x1c\x14\x57\xdd\x3e\x2f\x6c\x2d\xf8\x5c\x29\xc7\xd6\x88\xa8\xb8\xa6\x96\x92\x65\xf6\x94\x78\x9f\x41\x7d\x23\xdf\x9a\xa6\x63\x87\xac\xef\x23\x6a\xa5\x39\x10\x16\x47\xba\x3c\x60\x71\x92\xba\x23\xac\x1f\x47\xd5\xd0\x63\xfc\x52\x65\xbc\x8f\x42\x5c\x53\xc9\x94\x63\x99\xfb\x7f\x34\x79\xeb\x78\x8e\xcb\x4d\x36\xb1\xb1\x1d\xcf\xb7\xf9\x94\xed\xbf\x1e\x51\x33\x31\x08\xd5\x63\xf4\xb6\x05\x2c\xef\x68\xc3\x97\x26\xb0\xd5\xaf\xce\xb1\x8a\x48\x1c\x4b\x56\x05\x94\xd1\xca\x10\x4e\x56\x95\x50\xde\x43\x93\x99\xdc\x9b\xbd\x91\xfb\x8c\x5f\x93\xd5\x2f\x67\x65\x20\x0d\xcb\x5b\xc1\x27\xd7\xce\xc3\xd0\x2f\xb6\xa4\x3c\x3e\xa6\xd8\xdc\x10\xc9\xfe\xe4\xa4\x1d\x8d\x40\xa4\xd8\xd6\x8d\xa6\x9a\x0c\x83\x2b\x82\x6b\xa8\x50\x52\xc3\xc9\xae\x20\x54\xd4\x52\x98\x70\xcc\x1d\x86\xee\x7f\x02\x00\x00\xff\xff\xf2\x62\xef\x5d\xc6\x02\x00\x00")

func assetsTplBlockCTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplBlockCTpl,
		"assets/tpl/block.c.tpl",
	)
}

func assetsTplBlockCTpl() (*asset, error) {
	bytes, err := assetsTplBlockCTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/block.c.tpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(1504822751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplBlockXmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x4f\xf2\x40\x10\x3e\xbf\xfc\x8a\x79\x37\x1c\x34\x11\xaa\x57\x53\x48\x10\x34\x9a\x18\xf5\x60\xb8\x10\x62\x96\x76\x8a\x0d\x65\xb7\x96\x2d\x86\x6c\xe6\xbf\x9b\x9d\x6e\xa1\x60\x40\x0f\x1e\x67\xe7\x99\xe7\x63\x3a\x0d\x67\x99\x8e\x16\xa0\xe4\x12\x7b\xc2\x5a\xe8\x3e\xc9\x25\x02\x91\xe8\xb7\x00\x00\xc2\x48\x1a\x9c\xeb\x62\xd3\x77\xbd\xa1\x2f\x80\x28\x0c\xb6\x9d\x0a\x98\xaa\x44\x33\xe8\x41\x25\x9a\x01\xfc\x52\x35\x63\x69\x64\x43\xe3\xc6\x69\x3a\xa1\x47\xfd\x89\xc5\x4e\xcd\xda\x0e\x14\x52\xcd\x11\xda\x0b\xdc\x5c\x40\x7b\x2d\xb3\x12\xe1\xba\xe7\x58\xf3\xd2\xac\x80\x88\x81\x4c\xba\x96\x45\x2a\x67\x19\xc2\x4a\x47\x0b\x34\x3d\x91\x2a\x01\xd6\x42\x9a\x00\x7e\xf8\xd9\xee\x6d\x9c\x1a\x06\x89\x2b\x01\x44\xe8\x4b\xf6\x71\x08\x21\xe2\x79\x54\x31\x10\x55\x44\x67\x0a\x6b\xd8\x98\xbd\x88\x4b\x71\x0e\x44\xfc\xd4\x24\xa9\xba\x7b\x0c\x2e\x7f\x13\xe2\x17\x23\x20\xd8\xa5\x75\xc8\x8e\x0f\x75\x22\xfd\x73\x69\x7e\x8e\xaf\x4b\x23\xe0\x0f\x45\xc7\xb2\x38\xa2\x18\x9b\x4d\xbe\x97\x7e\xe4\x1e\x58\x66\xfb\x91\x7d\xa7\x3e\x27\xff\x61\xbe\xad\x53\xfc\x72\x99\x07\xf6\xbd\xad\x30\x70\x97\xe5\x8f\x2c\x29\x55\x64\x52\xad\xbc\x87\xe4\xed\xd4\xa9\xf1\xc4\xff\xc9\x70\x34\x78\x1d\x4c\x5a\xd6\x1e\x5b\xc2\x8b\x2c\x56\x18\xdf\xd5\xd4\x6e\x6d\x5b\x9f\x50\x15\x95\x9f\x7f\xd3\xa9\xf7\x11\xd4\x46\x7c\xfd\x8e\x59\x7e\x44\xb4\x7b\x8f\x59\xee\x68\x1a\xd3\x15\x3c\x0c\xf8\xc7\xec\x7f\x05\x00\x00\xff\xff\x99\x52\x20\xd7\xa0\x03\x00\x00")

func assetsTplBlockXmlTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplBlockXmlTpl,
		"assets/tpl/block.xml.tpl",
	)
}

func assetsTplBlockXmlTpl() (*asset, error) {
	bytes, err := assetsTplBlockXmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/block.xml.tpl", size: 928, mode: os.FileMode(420), modTime: time.Unix(1504824775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplSchemaYmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xc1\x6e\xab\x30\x10\xbc\xfb\x2b\x56\x22\xc7\x07\xdc\x91\xde\x3b\xbc\xa4\x6a\x7b\x49\x73\x69\xee\x06\x36\x18\x85\xd8\x16\x2c\x89\x90\xe5\x7f\xaf\x6c\x03\x21\x6a\x95\x4a\x51\xcb\x69\x77\x66\x18\xcf\x48\x1b\x3d\xf8\xb1\x08\x76\x9c\x0a\xf1\xbf\x51\xc5\x31\x03\x63\x20\xd9\xf2\x13\x82\xb5\x2c\xf2\xdb\x7b\x87\xad\x0c\x08\xc4\x1e\xd9\x70\xc2\xad\xba\x78\x09\x8b\xe0\x19\x25\xb6\x9c\xb0\x84\x7c\x00\x9d\x57\x28\x41\x10\xe9\x2e\x4b\xd3\xaa\x26\xd1\xe7\x49\xa1\x4e\x29\x5d\x44\xdd\x91\x92\xa9\x57\xb0\x87\xe3\xba\x28\xb7\x31\x0b\x4e\x58\xa9\x76\x08\xe8\x7a\xdc\x1c\x53\xcb\x83\x0a\xe8\xab\x3c\x28\x87\x18\x03\xf5\xc1\xad\xba\xa7\x0e\x62\xaf\x71\x63\xc6\x8c\x89\xa1\xe5\xb2\x42\x58\x1d\x71\xf8\x03\xab\x33\x6f\x7a\x84\xec\xef\xac\xb6\x96\x01\xc4\x30\x9b\x06\xc5\x6c\x0d\x00\x10\xec\x47\x62\xef\x0d\xac\xf5\xdb\xf2\x8f\x89\x30\x06\x50\x96\x5f\xfe\xfb\x54\xd6\xc4\xf3\xc6\xa9\x70\x1c\x97\x0e\x0b\xfa\x6a\xe2\x1a\xb8\x31\xfe\x34\xfb\xce\x6f\x3d\x4d\x35\x54\x18\xef\x96\x5e\xc8\x7f\xab\xf5\x37\x81\xf7\xbc\xf5\xcf\x9f\x79\x7b\x3f\xea\x24\x74\x39\x4b\x1a\xf4\xcd\xb3\x1b\x07\x4c\x49\xe7\xe3\x19\xc9\xe9\x84\x7e\xba\x85\xb5\x4c\x60\xa3\x33\xf8\x37\x59\x27\x2f\xd8\x68\x7f\xad\xaa\xc4\xd0\xc6\x75\x5c\xab\x12\x93\x1d\x27\x11\x52\x68\x4e\x62\x3c\xe3\x25\x71\xb5\xfd\x08\x00\x00\xff\xff\xb8\x73\x0d\x53\xe6\x03\x00\x00")

func assetsTplSchemaYmlTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplSchemaYmlTpl,
		"assets/tpl/schema.yml.tpl",
	)
}

func assetsTplSchemaYmlTpl() (*asset, error) {
	bytes, err := assetsTplSchemaYmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/schema.yml.tpl", size: 998, mode: os.FileMode(420), modTime: time.Unix(1504824349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCPb_macroH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x5f\x8b\xd3\x40\x14\xc5\x9f\xcd\xa7\x38\xb0\x2f\xdd\xc2\x36\x89\xf8\xe4\xd6\x05\xad\x2e\x14\xd6\xdd\x40\x1b\x7d\x11\xc2\x34\xb9\x49\x86\x26\x73\x87\x99\x9b\xfd\x83\xf8\xdd\x65\x92\x56\x6b\xd1\x37\x5f\xef\xcc\xf9\x9d\x99\xdf\x8d\xe7\x11\xe6\x58\x75\xda\x42\xe1\x51\x75\x03\x41\x18\x69\xb2\xd3\xe2\x17\xe1\x68\x43\x84\x56\xc4\xbe\x8d\xe3\x27\xbd\xd7\x0b\xab\xa4\x6c\x77\x1d\x97\x7b\xbf\x28\xb9\x8f\xb5\xa9\xe8\x79\x61\x5b\x1b\x67\x8e\x1b\xa7\xfa\x5e\x9b\xa6\x58\x0d\x5e\xb8\x2f\x3e\x8c\xf7\x2e\x36\xba\x31\xaa\xf3\x01\xf7\x95\xdd\xde\x83\x0d\x14\x2c\x6b\x23\xe4\xa0\x4c\x85\x8a\xc9\xc3\xb0\xc0\x91\x0c\xce\x1c\xdf\x12\x61\x1e\x47\x17\x15\xd5\xda\x10\x56\x77\xeb\xac\xc8\xbe\xbc\xbf\xcb\x3f\xcd\x2a\x25\xaa\xd0\xc6\x0e\x72\xf9\xea\x5b\x04\x00\xba\x9e\xcd\x7f\x4f\x71\x83\xe4\x39\xbd\xbd\xbd\xfc\x8e\xd3\xe9\xbb\x69\x7a\x8d\x1f\xa0\xce\xd3\x79\x68\x89\xab\xbf\xa7\xae\x8e\xb1\x28\x8a\x26\x63\x9f\x55\xe9\xd8\xa3\x66\x87\xe9\x77\x41\xdb\xda\x08\x35\xe4\xb0\x62\xf3\x48\xce\x6b\x36\xff\x4d\xe1\x84\x94\x70\x20\x5c\x28\x53\x15\xb5\xe3\xbe\x38\x34\xfa\x51\x54\x14\xcf\xf1\xf1\x28\xf2\x89\xdd\x3e\x78\xf6\xba\x31\x54\x41\x1f\x2e\x62\x37\x08\xb4\x47\xc9\xbd\x1d\x44\x89\x66\xa3\xba\xee\x05\x65\x4b\xca\x92\x3b\xf5\x9d\xaf\xef\xb3\x7c\x5b\x6c\x1f\x8a\xf5\xfd\x76\x36\xc9\xc6\xc1\xee\x0d\xd2\xe4\x3a\xf4\xfd\xda\xe7\xa1\x27\x2c\x73\x30\xe7\xa5\x27\xd4\x7f\x43\x63\xa4\xc9\xeb\x37\x23\x75\xd3\xea\x5a\xd0\x51\x2d\x48\x13\xd8\x4e\x95\xe4\xe1\x48\x55\x2f\xa3\x71\x1e\x24\x04\xfe\xa0\x8e\xcc\x87\x7c\x9b\xe5\x67\xd8\xe5\x32\xbc\xf5\x67\x00\x00\x00\xff\xff\xde\x22\x61\xed\xe8\x02\x00\x00")

func assetsCPb_macroHBytes() ([]byte, error) {
	return bindataRead(
		_assetsCPb_macroH,
		"assets/c/pb_macro.h",
	)
}

func assetsCPb_macroH() (*asset, error) {
	bytes, err := assetsCPb_macroHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/c/pb_macro.h", size: 744, mode: os.FileMode(420), modTime: time.Unix(1505166976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/block.c.tpl": assetsTplBlockCTpl,
	"assets/tpl/block.xml.tpl": assetsTplBlockXmlTpl,
	"assets/tpl/schema.yml.tpl": assetsTplSchemaYmlTpl,
	"assets/c/pb_macro.h": assetsCPb_macroH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"c": &bintree{nil, map[string]*bintree{
			"pb_macro.h": &bintree{assetsCPb_macroH, map[string]*bintree{}},
		}},
		"tpl": &bintree{nil, map[string]*bintree{
			"block.c.tpl": &bintree{assetsTplBlockCTpl, map[string]*bintree{}},
			"block.xml.tpl": &bintree{assetsTplBlockXmlTpl, map[string]*bintree{}},
			"schema.yml.tpl": &bintree{assetsTplSchemaYmlTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

