// Code generated by go-bindata.
// sources:
// tpl/block.c.tpl
// tpl/block.xml.tpl
// tpl/schema.yml.tpl
// DO NOT EDIT!

package pb

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplBlockCTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3d\x6f\x83\x30\x10\x86\x77\xff\x8a\x77\xc8\x90\xa0\x12\xef\x91\x5a\xa9\x55\xd4\xaa\x43\xd3\x2e\xed\x5a\x39\x70\x0d\x56\xc8\x19\xc1\x91\x08\x59\xfc\xf7\xca\x26\x1f\x0c\x95\x0a\x13\xbc\x7e\xee\x9e\xc3\xa7\x13\x85\x04\x1f\x46\xb2\xe2\xa9\x74\xd9\x7e\x05\xef\xb1\xdc\x98\x03\xa1\xef\xc3\x51\xf8\xfc\x6c\xa8\xe6\x21\x42\x1a\x93\xb5\x11\xda\xb8\xd3\xc0\x04\xec\x85\x98\x6a\x23\x94\x63\xdb\xa1\xda\xee\x88\x51\x88\x54\xcd\x4a\xeb\x9d\x95\xa2\xdd\x2e\x33\x77\xd0\x72\x2a\x6c\x23\x8e\x75\x24\xce\xa5\xb9\x11\x93\x3e\x28\xef\x53\xd8\x1f\x2c\x5f\xb9\x6a\xa5\x41\xda\xf7\x31\xaa\x0d\xef\x08\xb3\x3d\x75\x77\x98\x1d\x4d\xd9\x12\x56\xf7\x57\x6a\x98\x31\x3e\x89\x65\xef\x23\x88\x73\x29\x71\x7e\x6d\x73\x7b\x8f\x92\xf7\x56\xa6\x58\x2e\xd8\x48\xe3\x5a\x99\xae\xf9\x32\xf5\xbf\x8e\xc8\x8c\x04\xa1\x7b\x3c\xbd\x6c\x01\xf3\x5b\xb4\x96\xae\x0a\xd9\xe2\x4f\x73\xec\xa2\x95\x42\x23\x46\x6c\x06\xcb\xa5\x65\xc2\xd1\xd9\x1c\xd6\x7b\x94\xc4\xa3\x9b\x73\x97\xe4\xf6\x97\xdf\xa3\xe5\xcf\x27\x55\x20\x09\xeb\x5b\x78\xa5\xc2\xec\x3a\xc1\x5b\x87\xc7\x13\x35\xee\x40\x78\x6e\x39\x13\xeb\x78\x98\xa9\x57\xbf\x01\x00\x00\xff\xff\x8b\x86\x6a\x82\x6c\x02\x00\x00")

func tplBlockCTplBytes() ([]byte, error) {
	return bindataRead(
		_tplBlockCTpl,
		"tpl/block.c.tpl",
	)
}

func tplBlockCTpl() (*asset, error) {
	bytes, err := tplBlockCTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/block.c.tpl", size: 620, mode: os.FileMode(420), modTime: time.Unix(1504744145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplBlockXmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x51\x5f\x6b\xc2\x30\x10\x7f\x9e\x9f\xe2\x16\x7c\x1c\x46\x5f\x47\x5b\x28\xeb\x06\x03\xd9\x60\xff\x5e\x44\x46\x6c\x4f\x17\x6c\x13\xa9\xa9\xa3\x94\x7c\xf7\x71\x49\xa3\x32\x74\xb2\xb7\xe4\xee\xf7\x8f\xfb\x45\x8b\x52\xe7\x6b\x50\xa2\xc2\x98\x75\x1d\x8c\xe8\x05\xd6\xb2\x64\x00\x00\x10\xe5\xc2\xe0\x4a\xd7\x6d\x42\xbb\xf0\x01\x6b\x23\xbe\xdf\x78\xa0\x54\x4b\xed\x40\xf4\x70\x00\x37\xf1\xcb\x42\x18\x71\xe4\xe1\x3c\x9f\x44\x85\x53\xfd\x8d\xf5\xc1\xad\xeb\xa0\x16\x6a\x85\x30\x5c\x63\x7b\x03\xc3\x9d\x28\x1b\x84\xdb\x98\x44\x37\x8d\xd9\x82\xb5\x0e\xe7\x34\x77\xa2\x96\x62\x51\x22\x6c\x75\xbe\x46\x13\x33\xa9\x18\x90\x67\xcc\x5e\xe5\x4a\x89\x12\x1c\x89\x01\x4f\x2e\x90\xb0\x90\x86\x86\x31\x9b\x30\x70\x9e\x31\x9b\x8c\xc7\x41\x2d\xc3\x52\xb4\x60\x64\x85\x20\x15\x54\xdb\xbd\x62\xd7\x01\xaa\x22\x84\x3a\x1f\x5e\x37\xe6\x72\x7a\x4d\x51\xbd\xa1\xa7\xfe\xdb\x66\x27\xea\x33\x1e\x85\x69\x37\xfe\xf4\x1e\x3e\xa2\x3f\x9d\xfd\xd0\x49\xbf\x08\xed\x1f\x1f\x8d\xf3\xe7\x17\x78\x7c\x80\x8f\x74\xfa\x7e\x0f\x69\x96\x85\x1b\x8d\xd9\x89\x7c\x11\xa7\xb2\xfb\xde\x97\x8d\xca\x8d\xd4\xaa\xf7\x59\x7e\xfe\xd5\xbe\x63\x5c\xcf\xee\xb2\xf4\x2d\x9d\x05\xe5\xd1\x5e\xc2\xda\xc1\xd5\x7c\xde\x0b\xf3\x30\xee\xff\x5f\x58\x6e\x4e\xa9\x90\x02\xed\x7e\xb1\x3d\x3c\xe2\x2e\x4a\xf2\x13\x00\x00\xff\xff\xac\xee\x28\x73\x04\x03\x00\x00")

func tplBlockXmlTplBytes() ([]byte, error) {
	return bindataRead(
		_tplBlockXmlTpl,
		"tpl/block.xml.tpl",
	)
}

func tplBlockXmlTpl() (*asset, error) {
	bytes, err := tplBlockXmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/block.xml.tpl", size: 772, mode: os.FileMode(420), modTime: time.Unix(1504733091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplSchemaYmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xb1\x6e\x83\x30\x10\x86\x77\x9e\xe2\x24\x32\x96\xb0\x23\x75\x69\x52\xb5\x5d\xd2\x2c\xcd\x6e\xe0\x82\x51\x88\x6d\xc1\x91\x08\x21\xde\xbd\xf2\xd9\xb8\x41\xad\x32\xa4\x4c\xf6\x7f\x9f\xcf\x9f\x74\x38\x7e\xf0\x8b\x62\xd8\x0b\x2a\xe4\x4b\xa3\x8b\x53\x06\xe3\x08\xeb\x9d\x38\x23\x4c\x53\x14\xf3\xee\xab\xc3\x56\xb9\x04\x12\x4e\xb6\x82\x70\xa7\xaf\x8c\x44\x31\xbc\xa1\xc2\x56\x10\x96\x90\x0f\x60\xf2\x0a\x15\x48\x22\xd3\x65\x69\x5a\xd5\x24\xfb\x7c\x5d\xe8\x73\x4a\x57\x59\x77\xa4\x55\xca\x44\xf4\xb0\xae\x55\x59\x6a\x16\x82\xb0\xd2\xed\xe0\xd2\x8d\xdf\xd9\x4a\xad\x8e\xda\xa5\x1f\xea\xa8\x6d\x32\x8e\x50\x1f\xed\xd6\xf4\xd4\x41\xc2\x8c\x5d\x66\xd1\x38\x26\xd0\x0a\x55\x21\xac\x4e\x38\x3c\xc1\xea\x22\x9a\x1e\x21\x7b\x0e\xf4\x34\x45\x00\x09\x84\xa6\x8e\x08\xad\x01\x00\x38\xb9\x2d\x1e\xb8\x89\xaf\x62\x59\x93\xc8\x9b\x05\xf0\xea\x33\x2f\x87\xaa\x64\xab\xe5\xd2\x2a\x7f\xf6\x14\x9c\xb5\x5b\xdf\x95\x9e\xf9\x7f\x59\xdf\x35\x3a\x88\xd6\xe9\x5c\x44\x7b\xdf\x85\x49\x2f\x52\xd2\x60\x16\x97\x6d\x6d\x30\xab\x84\xe9\xfa\xe2\x3c\xe3\xbf\x45\x24\x36\xc6\xcd\xf7\x1d\x1b\xc3\xff\x82\x2e\xd1\xa9\x5c\x6b\x92\xb0\xde\xe8\xd2\x9f\x4f\xd8\x79\x2f\x48\xba\xbb\x8c\x20\xe9\xce\xce\x99\x65\x6c\xe7\x1b\x9c\x1f\x85\xe3\xf3\x9f\xf7\x11\xd2\xdf\x56\xd3\xf4\x1d\x00\x00\xff\xff\x31\x74\xa8\xfd\x88\x03\x00\x00")

func tplSchemaYmlTplBytes() ([]byte, error) {
	return bindataRead(
		_tplSchemaYmlTpl,
		"tpl/schema.yml.tpl",
	)
}

func tplSchemaYmlTpl() (*asset, error) {
	bytes, err := tplSchemaYmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/schema.yml.tpl", size: 904, mode: os.FileMode(420), modTime: time.Unix(1504731659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/block.c.tpl": tplBlockCTpl,
	"tpl/block.xml.tpl": tplBlockXmlTpl,
	"tpl/schema.yml.tpl": tplSchemaYmlTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"block.c.tpl": &bintree{tplBlockCTpl, map[string]*bintree{}},
		"block.xml.tpl": &bintree{tplBlockXmlTpl, map[string]*bintree{}},
		"schema.yml.tpl": &bintree{tplSchemaYmlTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

