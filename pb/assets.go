// Code generated by go-bindata.
// sources:
// tpl/block.c.tpl
// tpl/block.xml.tpl
// tpl/schema.yml.tpl
// DO NOT EDIT!

package pb

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplBlockCTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3d\x6f\x83\x30\x10\x86\x77\xff\x8a\x77\xc8\x90\xa0\x12\xef\x91\xda\xa1\x8a\x54\x65\x49\xbb\xb4\x6b\xe5\xc0\x35\x58\x81\x33\xc2\x47\xa2\xc8\xe2\xbf\x57\x76\xbe\x18\x2a\x15\x26\x78\xfd\xdc\x3d\x87\x4f\x67\x0a\x19\x3e\x8c\x14\xd5\x6b\xed\x8a\xc3\x0a\x21\x60\xb9\x35\x0d\x61\x18\xe2\x51\xfc\xfc\xf4\xd4\xf1\x25\x42\x9e\x92\xb5\x11\xda\xba\xd3\x85\x89\xd8\x1b\x31\x75\x46\xa8\xc4\xee\x8c\x76\xb7\x27\x46\x25\xd2\xfa\x95\xd6\x7b\x2b\x55\xbf\x5b\x16\xae\xd1\x72\xaa\xac\x17\xc7\x3a\x11\xd7\xd2\xd2\x88\xc9\x5f\x54\x08\x39\xec\x0f\x96\x1b\x6e\x7b\xf1\xc8\x87\x21\x45\x9d\xe1\x3d\x61\x76\xa0\xf3\x13\x66\x47\x53\xf7\x84\xd5\xf3\x9d\xba\xcc\x98\x9e\xcc\x72\x08\x09\xc4\xb5\x94\xb8\xbc\xb7\x79\xbc\x27\xc9\x7b\x2f\x53\x2c\x37\x6c\xa4\x71\xbd\x4c\xd7\x7c\x99\xee\x5f\x47\x62\x46\x82\xd8\x3d\x9d\xde\xb6\x80\xf9\x23\x5a\xcb\xb9\x8d\xd9\xe2\x4f\x73\xea\xa2\x95\x17\x23\xb6\x80\xe5\xda\x32\xe1\xe8\x6c\x09\x1b\x02\x6a\xe2\xd1\xbd\xb9\x5b\xf2\xf8\xc7\xef\xd1\xea\xe7\x93\x2a\x90\xc5\xe5\x2d\x82\x52\x71\x72\x9d\x61\xd3\xb4\x35\x35\xc4\x02\xa9\x08\xbe\xa5\xc2\x9a\x1a\xde\xf4\x05\xa1\xa2\x8e\xe2\x78\x6a\x50\xbf\x01\x00\x00\xff\xff\xa9\x83\x66\x90\x76\x02\x00\x00")

func tplBlockCTplBytes() ([]byte, error) {
	return bindataRead(
		_tplBlockCTpl,
		"tpl/block.c.tpl",
	)
}

func tplBlockCTpl() (*asset, error) {
	bytes, err := tplBlockCTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/block.c.tpl", size: 630, mode: os.FileMode(420), modTime: time.Unix(1504790124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplBlockXmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x4f\xf2\x40\x10\x3e\xbf\xfc\x8a\x79\x37\x1c\x85\xea\xd5\x14\x12\x04\x8d\x26\x46\x3d\x18\x2e\x84\x98\xa5\x9d\x62\x43\xd9\xad\x65\x8b\x21\xcd\xfc\x77\xb3\xb3\x5b\x28\x44\xaa\x07\x8f\xb3\xf3\xcc\xf3\x31\x9d\x86\x8b\x4c\x47\x2b\x50\x72\x8d\x03\x51\x55\xd0\x7f\x92\x6b\x04\x22\x31\xec\x00\x00\x84\x91\x34\xb8\xd4\xc5\x6e\x68\x7b\x63\x5f\x00\x51\x18\xec\x3b\x0e\x98\xaa\x44\x33\xe8\x41\x25\x9a\x01\xfc\xe2\x9a\xb1\x34\xb2\xa1\x71\x63\x35\xad\xd0\xa3\xfe\xc4\xe2\xa0\x56\x55\x3d\x28\xa4\x5a\x22\x74\x57\xb8\xbb\x80\xee\x56\x66\x25\xc2\xf5\xc0\xb2\xe6\xa5\xd9\x00\x11\x03\x99\x74\x2b\x8b\x54\x2e\x32\x84\x8d\x8e\x56\x68\x06\x22\x55\x02\xaa\x0a\xd2\x04\xf0\xc3\xcf\xf6\x6f\xe3\xd4\x30\x48\x5c\x09\x20\x42\x5f\xb2\x8f\x53\x08\x11\xcf\xa3\x8a\x81\xc8\x11\x29\xac\x51\x53\xb6\x22\x2e\x2d\x0b\xbf\x34\x29\x5c\xf3\x68\xde\xa6\x6f\x42\xfc\x5a\x04\x04\x87\xac\x16\xd9\xf3\x91\x5a\xb2\x3f\x97\xe6\xe7\xf0\xba\x34\x02\xfe\x50\x74\x2a\x8b\x33\x8a\xb1\xd9\xe5\x47\xe9\x27\xf6\x81\x65\xf6\x9f\xd8\x77\xea\x63\x82\x33\xdb\xfc\xed\x32\x4f\xec\x7b\x5b\x61\x60\xef\xca\x9f\x58\x52\xaa\xc8\xa4\x5a\x79\x0f\xc9\x5b\xdb\xa1\xf1\xc4\xff\xd9\x78\x32\x7a\x1d\xcd\x3a\x2d\x5b\x78\x91\xc5\x06\xe3\xbb\x9a\xdb\xee\x6d\x6f\x14\x5c\xe1\x0c\xfd\x9b\xcf\xbd\x91\xa0\x76\xe2\xeb\x77\xcc\xf2\xef\x55\xa1\x7f\x8f\x59\x6e\x69\x1a\xd3\x0e\x1e\x06\xfc\x5f\x0e\xbf\x02\x00\x00\xff\xff\x41\x25\x54\xa4\x9f\x03\x00\x00")

func tplBlockXmlTplBytes() ([]byte, error) {
	return bindataRead(
		_tplBlockXmlTpl,
		"tpl/block.xml.tpl",
	)
}

func tplBlockXmlTpl() (*asset, error) {
	bytes, err := tplBlockXmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/block.xml.tpl", size: 927, mode: os.FileMode(420), modTime: time.Unix(1504798370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplSchemaYmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x6f\xb3\x30\x0c\x86\xef\xf9\x15\x96\xe8\xf1\xa3\xdc\x91\xbe\xcb\xda\x69\xdb\xa5\xeb\x65\xbd\x07\x70\x09\x2a\x4d\x22\x30\xad\x50\xc4\x7f\x9f\x12\x03\x03\x69\xea\xa4\x72\xb2\x5f\xbf\xb1\x1f\xe1\x24\x7a\xf2\x13\x11\x1c\x25\xe5\xea\xa5\x36\xf9\x25\x05\xe7\x60\x7b\x90\x57\x84\x61\x10\x51\xc8\xbe\x5a\x6c\x34\x2b\x10\x07\x65\x2f\x09\x0f\xe6\x1e\x2c\x22\x82\x37\xd4\xd8\x48\xc2\x02\xb2\x1e\x6c\x56\xa2\x06\x45\x64\xdb\x34\x49\xca\x8a\x54\x97\x6d\x73\x73\x4d\xe8\xae\xaa\x96\x8c\x4e\x82\x43\x3c\x8d\xeb\x51\xd6\x98\xb9\x24\x2c\x4d\xd3\xb3\xba\x1b\x33\x5f\xa9\xf4\xd9\xb0\xfa\xa1\xcf\xc6\x2b\xce\x41\x75\xf6\xa9\xed\xa8\x85\x38\x78\x7c\x98\x0a\xe7\x62\x68\xa4\x2e\x11\x36\x17\xec\xff\xc1\xe6\x26\xeb\x0e\x21\xfd\x3f\xbb\x87\x41\x00\xc4\x30\x37\x65\xc7\xdc\x1a\x00\x20\x28\xcb\xe2\x29\x34\x19\xab\x58\x54\x24\xb3\x7a\x65\x78\x1d\x35\x86\x8b\x01\x75\x11\xb0\xd6\x71\x80\xfe\xec\x68\xe2\x30\x1c\x3e\xa4\x5e\xd8\x9f\xc7\xfe\x03\xe9\x24\x9b\x30\xe0\x26\x9b\xc7\x30\x93\xd1\x93\x14\xd4\xdb\xd5\xb4\xbd\x17\x26\x96\x79\xbf\x63\x71\xda\xf2\x6f\x24\xc3\x20\x14\xd6\x96\x57\xfc\x8e\xb5\x0d\xd7\xc1\x14\xc8\x2c\xf7\x8a\x14\x6c\x77\xa6\x98\x1b\x78\xe6\xa3\x24\xc5\xc3\xac\x24\xc5\x67\x27\x6d\xd1\x78\xb2\x87\x77\xc1\xfe\xec\xe7\x89\xcc\xaa\x73\xcb\x7f\xc2\x67\xbf\x03\x00\x00\xff\xff\xc2\xb9\xc3\xe8\x8b\x03\x00\x00")

func tplSchemaYmlTplBytes() ([]byte, error) {
	return bindataRead(
		_tplSchemaYmlTpl,
		"tpl/schema.yml.tpl",
	)
}

func tplSchemaYmlTpl() (*asset, error) {
	bytes, err := tplSchemaYmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/schema.yml.tpl", size: 907, mode: os.FileMode(420), modTime: time.Unix(1504783769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/block.c.tpl": tplBlockCTpl,
	"tpl/block.xml.tpl": tplBlockXmlTpl,
	"tpl/schema.yml.tpl": tplSchemaYmlTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"block.c.tpl": &bintree{tplBlockCTpl, map[string]*bintree{}},
		"block.xml.tpl": &bintree{tplBlockXmlTpl, map[string]*bintree{}},
		"schema.yml.tpl": &bintree{tplSchemaYmlTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

