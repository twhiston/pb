// Code generated by go-bindata.
// sources:
// tpl/block.c.tpl
// tpl/block.xml.tpl
// tpl/schema.yml.tpl
// DO NOT EDIT!

package pb

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplBlockCTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\x83\x30\x10\x85\x77\x7e\xc5\x1b\x32\x24\xa8\xe0\x3d\x52\x3b\xb4\x91\xaa\x2c\x69\x97\x76\xad\x1c\xb8\x06\x2b\xc6\x46\xf8\x48\x14\x59\xfc\xf7\xca\x26\x21\x0c\xad\x0a\x13\xfe\xee\xdd\xbd\x3b\x9f\x45\x9a\x20\xc5\xbb\xe4\xa2\x7a\xd6\xb6\x38\xae\xe1\x3d\xf2\x9d\xac\x09\x7d\x1f\x42\xe1\xf8\xe1\xa8\x35\x03\x42\x16\xc9\x46\x32\xed\xec\x79\xd0\x04\xd9\x2b\x19\x6a\x25\x53\x89\xfd\x05\xcd\xfe\x40\x06\x15\x73\xe3\xd6\x42\x1c\x14\x57\xdd\x3e\x2f\x6c\x2d\xf8\x5c\x29\xc7\xd6\x88\xa8\xb8\xa6\x96\x92\x65\xf6\x94\x78\x9f\x41\x7d\x23\xdf\x9a\xa6\x63\x87\xac\xef\x23\x6a\xa5\x39\x10\x16\x47\xba\x3c\x60\x71\x92\xba\x23\xac\x1f\x47\xd5\xd0\x63\xfc\x52\x65\xbc\x8f\x42\x5c\x53\xc9\x94\x63\x99\xfb\x7f\x34\x79\xeb\x78\x8e\xcb\x4d\x36\xb1\xb1\x1d\xcf\xb7\xf9\x94\xed\xbf\x1e\x51\x33\x31\x08\xd5\x63\xf4\xb6\x05\x2c\xef\x68\xc3\x97\x26\xb0\xd5\xaf\xce\xb1\x8a\x48\x1c\x4b\x56\x05\x94\xd1\xca\x10\x4e\x56\x95\x50\xde\x43\x93\x99\xdc\x9b\xbd\x91\xfb\x8c\x5f\x93\xd5\x2f\x67\x65\x20\x0d\xcb\x5b\xc1\x27\xd7\xce\xc3\xd0\x2f\xb6\xa4\x3c\x3e\xa6\xd8\xdc\x10\xc9\xfe\xe4\xa4\x1d\x8d\x40\xa4\xd8\xd6\x8d\xa6\x9a\x0c\x83\x2b\x82\x6b\xa8\x50\x52\xc3\xc9\xae\x20\x54\xd4\x52\x98\x70\xcc\x1d\x86\xee\x7f\x02\x00\x00\xff\xff\xf2\x62\xef\x5d\xc6\x02\x00\x00")

func tplBlockCTplBytes() ([]byte, error) {
	return bindataRead(
		_tplBlockCTpl,
		"tpl/block.c.tpl",
	)
}

func tplBlockCTpl() (*asset, error) {
	bytes, err := tplBlockCTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/block.c.tpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(1504822751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplBlockXmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x4f\xf2\x40\x10\x3e\xbf\xfc\x8a\x79\x37\x1c\x85\xea\xd5\x14\x12\x04\x8d\x26\x46\x3d\x18\x2e\x84\x98\xa5\x9d\x62\x43\xd9\xad\x65\x8b\x21\xcd\xfc\x77\xb3\xb3\x5b\x28\x44\xaa\x07\x8f\xb3\xf3\xcc\xf3\x31\x9d\x86\x8b\x4c\x47\x2b\x50\x72\x8d\x03\x51\x55\xd0\x7f\x92\x6b\x04\x22\x31\xec\x00\x00\x84\x91\x34\xb8\xd4\xc5\x6e\x68\x7b\x63\x5f\x00\x51\x18\xec\x3b\x0e\x98\xaa\x44\x33\xe8\x41\x25\x9a\x01\xfc\xe2\x9a\xb1\x34\xb2\xa1\x71\x63\x35\xad\xd0\xa3\xfe\xc4\xe2\xa0\x56\x55\x3d\x28\xa4\x5a\x22\x74\x57\xb8\xbb\x80\xee\x56\x66\x25\xc2\xf5\xc0\xb2\xe6\xa5\xd9\x00\x11\x03\x99\x74\x2b\x8b\x54\x2e\x32\x84\x8d\x8e\x56\x68\x06\x22\x55\x02\xaa\x0a\xd2\x04\xf0\xc3\xcf\xf6\x6f\xe3\xd4\x30\x48\x5c\x09\x20\x42\x5f\xb2\x8f\x53\x08\x11\xcf\xa3\x8a\x81\xc8\x11\x29\xac\x51\x53\xb6\x22\x2e\x2d\x0b\xbf\x34\x29\x5c\xf3\x68\xde\xa6\x6f\x42\xfc\x5a\x04\x04\x87\xac\x16\xd9\xf3\x91\x5a\xb2\x3f\x97\xe6\xe7\xf0\xba\x34\x02\xfe\x50\x74\x2a\x8b\x33\x8a\xb1\xd9\xe5\x47\xe9\x27\xf6\x81\x65\xf6\x9f\xd8\x77\xea\x63\x82\x33\xdb\xfc\xed\x32\x4f\xec\x7b\x5b\x61\x60\xef\xca\x9f\x58\x52\xaa\xc8\xa4\x5a\x79\x0f\xc9\x5b\xdb\xa1\xf1\xc4\xff\xd9\x78\x32\x7a\x1d\xcd\x3a\x2d\x5b\x78\x91\xc5\x06\xe3\xbb\x9a\xdb\xee\x6d\x6f\x14\x5c\xe1\x0c\xfd\x9b\xcf\xbd\x91\xa0\x76\xe2\xeb\x77\xcc\xf2\xef\x55\xa1\x7f\x8f\x59\x6e\x69\x1a\xd3\x0e\x1e\x06\xfc\x5f\x0e\xbf\x02\x00\x00\xff\xff\x41\x25\x54\xa4\x9f\x03\x00\x00")

func tplBlockXmlTplBytes() ([]byte, error) {
	return bindataRead(
		_tplBlockXmlTpl,
		"tpl/block.xml.tpl",
	)
}

func tplBlockXmlTpl() (*asset, error) {
	bytes, err := tplBlockXmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/block.xml.tpl", size: 927, mode: os.FileMode(420), modTime: time.Unix(1504798370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplSchemaYmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x31\x6b\xc3\x30\x10\x85\x77\xfd\x8a\x03\x67\xac\xe3\xdd\xd0\xa5\x49\x69\xbb\xa4\x59\x9a\x39\xb2\x7d\xb1\x4c\x1c\x49\xc8\xe7\x04\x23\xf4\xdf\x8b\x24\xdb\xc4\x50\x52\x88\xa6\xbb\x77\x8f\x77\x1f\x9c\x92\x27\x1f\x4b\x60\xcf\xa9\x14\x6f\xad\x2a\xcf\x39\x58\x0b\xeb\x1d\xbf\x20\x38\xc7\x92\xd0\xfd\x74\x68\x64\x54\x20\x0d\xca\x96\x13\xee\xd4\x2d\x58\x58\x02\x1f\x28\xd1\x70\xc2\x0a\x8a\x01\x74\x51\xa3\x04\x41\xa4\xbb\x3c\xcb\xea\x86\x44\x5f\xac\x4b\x75\xc9\xe8\x26\x9a\x8e\x94\xcc\x82\x83\x3d\x8d\xeb\x51\x96\x98\x25\x27\xac\x95\x19\xa2\xba\x19\x3b\x3f\x69\xe4\x49\x45\xf5\x4b\x9e\x94\x57\xac\x85\xe6\xe4\x5b\xdd\x53\x07\x69\xf0\xf8\x32\x67\xd6\xa6\x60\xb8\xac\x11\x56\x67\x1c\x5e\x60\x75\xe5\x6d\x8f\x90\xbf\xce\x6e\xe7\x18\x40\x0a\x73\x68\x74\xcc\xd1\x00\x00\x41\xb9\x1f\x1e\x42\xc8\x38\xc5\xaa\x21\x5e\xb4\x0b\xc3\xfb\xa8\x45\xb8\x14\x50\x56\x01\x6b\x59\x07\xe8\xef\x9e\x26\x0e\x15\xcb\x87\xd4\x77\xf6\xe7\xb1\xff\x41\x3a\x70\x13\x16\x5c\xb9\x79\x0c\x33\x19\x3d\x49\x45\x83\x5e\x6c\xdb\x7a\x61\x62\x99\xef\x3b\x0e\xa7\x2b\xff\x45\xe2\x1c\x13\xd8\xea\x1c\x8e\xfe\xc6\x9f\xd8\x6a\x70\xee\xc8\x4a\x55\x61\xa4\xb9\x35\x24\x60\xbd\x51\xd5\x1c\xe1\xa9\xf7\x9c\x44\x5c\xa7\x39\x89\xf8\x41\x26\xed\x2e\xda\xda\xb1\xfa\x0d\x00\x00\xff\xff\x16\xb4\xf7\x80\x5b\x03\x00\x00")

func tplSchemaYmlTplBytes() ([]byte, error) {
	return bindataRead(
		_tplSchemaYmlTpl,
		"tpl/schema.yml.tpl",
	)
}

func tplSchemaYmlTpl() (*asset, error) {
	bytes, err := tplSchemaYmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/schema.yml.tpl", size: 859, mode: os.FileMode(420), modTime: time.Unix(1504822572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/block.c.tpl": tplBlockCTpl,
	"tpl/block.xml.tpl": tplBlockXmlTpl,
	"tpl/schema.yml.tpl": tplSchemaYmlTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"block.c.tpl": &bintree{tplBlockCTpl, map[string]*bintree{}},
		"block.xml.tpl": &bintree{tplBlockXmlTpl, map[string]*bintree{}},
		"schema.yml.tpl": &bintree{tplSchemaYmlTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

